import streamlit as st
import pandas as pd
import plotly.express as px
import sqlite3
import hashlib
import matplotlib.pyplot as plt

st.markdown(
    """
    <style>
    * {
        font-family: "Constantia", sans-serif; 
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Database setup
def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users_1 (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE,
            password TEXT
        )
    """)
    conn.commit()
    conn.close()

# Hash passwords for security
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# Register a new user
def register_user(username, password):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO users_1 (username, password) VALUES (?, ?)", (username, hash_password(password)))
        conn.commit()
        conn.close()
        return True
    except sqlite3.IntegrityError:
        return False  # Username already exists

# Authenticate user
def authenticate(username, password):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT password FROM users_1 WHERE username = ?", (username,))
    stored_password = cursor.fetchone()
    conn.close()
    
    if stored_password and stored_password[0] == hash_password(password):
        return True
    return False

# Logout function
def logout():
    st.session_state.authenticated = False
    st.session_state.username = None
    # st.experimental_rerun()
    st.rerun()

# Initialize database
init_db()

# Session state initialization
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False
if "username" not in st.session_state:
    st.session_state.username = None

# Authentication flow
if not st.session_state.authenticated:
    st.title("üîê Login / Register")

    tab1, tab2 = st.tabs(["üîëLogin", "üÜïSign Up"])

    with tab1:  # Login tab
        username = st.text_input("Username")
        password = st.text_input("Password", type="password")
        if st.button("Login"):
            if authenticate(username, password):
                st.session_state.authenticated = True
                st.session_state.username = username
                st.success(f"‚úÖ Logged in as {username}")
                # st.experimental_rerun()
                st.rerun()
            else:
                st.error("‚ùå Invalid username or password")

    with tab2:  # Sign Up tab
        new_username = st.text_input("New Username")
        new_password = st.text_input("New Password", type="password")
        if st.button("Sign Up"):
            if register_user(new_username, new_password):
                st.success("‚úÖ Account created! You can now log in.")
            else:
                st.error("‚ö†Ô∏è Username already taken. Choose a different one.")

else:
    # User Dashboard
    st.sidebar.write(f"üë§ Logged in as: **{st.session_state.username}**")
    st.sidebar.button("üö™Logout", on_click=logout)

    # Example: Show users in the database (admin feature)
    if st.session_state.username == "admin":
        st.subheader("üîß Admin Panel")
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("SELECT id, username FROM users_1")
        users = cursor.fetchall()
        conn.close()

        st.write("üìú Registered Users:")
        for user in users:
            st.write(f"üÜî {user[0]} | üë§ {user[1]}")


    df = px.data.tips()
    column_descriptions = {
        "total_bill": "–û–±—â–∞—è —Å—É–º–º–∞ —Å—á–µ—Ç–∞ (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö)",
        "tip": "–°—É–º–º–∞ —á–∞–µ–≤—ã—Ö (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö)",
        "sex": "–ü–æ–ª (Male - –º—É–∂—á–∏–Ω–∞, Female - –∂–µ–Ω—â–∏–Ω–∞)",
        "smoker": "–ö—É—Ä—è—â–∏–π –ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å (Yes - –¥–∞, No - –Ω–µ—Ç)",
        "day": "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (Thur - –ß–µ—Ç–≤–µ—Ä–≥, Fri - –ü—è—Ç–Ω–∏—Ü–∞, Sat - –°—É–±–±–æ—Ç–∞, Sun - –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)",
        "time": "–í—Ä–µ–º—è –¥–Ω—è (Lunch - –æ–±–µ–¥, Dinner - —É–∂–∏–Ω)",
        "size": "–†–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –∑–∞ —Å—Ç–æ–ª–æ–º)"
    }
    
    st.markdown("<h1>–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ —á–∞–µ–≤—ã—Ö<br>(Tips Dataset)</h1>", unsafe_allow_html=True)
    
        
    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å/–°–∫—Ä—ã—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."):
        st.dataframe(df)
    tab1, tab2, tab3 = st.tabs(["üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", "üîç –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"])
    



    with tab1:
        st.sidebar.header("–§–∏–ª—å—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        day_filter = st.sidebar.multiselect("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å", list(df["day"].astype(str).unique()), default=list(df["day"].astype(str).unique()))
        gender_filter = st.sidebar.multiselect("üöª –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª", df["sex"].unique(), default=df["sex"].unique())

        filtered_data = df[(df["day"].isin(day_filter)) & (df["sex"].isin(gender_filter))]

        st.subheader("–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤")
        for col, desc in column_descriptions.items():
            st.write(f"**{col}** - {desc}")
    

        st.subheader("üìã –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        st.write(filtered_data)
        
        st.markdown(
            f"### üî¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: <span style='color:red;'>{df.shape[0]}</span>, –≤—Å–µ–≥–æ —Å—Ç–æ–ª–±—Ü–æ–≤: <span style='color:red;'>{df.shape[1]}</span>", 
            unsafe_allow_html=True
        )

        

        st.subheader("üîù –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:")
        st.write(df.head())

        st.subheader("üîç –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö:")
        st.dataframe(df.describe())
        
        st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –ø–æ –ø–æ–ª—É")
        st.write(df["sex"].value_counts(dropna = False))

        st.subheader("üí∞ –°—Ä–µ–¥–Ω–∏–µ —á–∞–µ–≤—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–∞")
        avg_tips = df.groupby('sex')['tip'].mean().reset_index()
        st.write(avg_tips)

        
    with tab2:
        

        st.subheader("üìâ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞–µ–≤—ã—Ö")
        fig1 = px.histogram(df, x='tip', nbins=20, title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö')
        st.plotly_chart(fig1)

        st.subheader("üí≤ –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–∞–µ–≤—ã—Ö –æ—Ç —Å—É–º–º—ã —Å—á–µ—Ç–∞")
        fig2 = px.scatter(df, x='total_bill', y='tip', color='sex', title='–ß–∞–µ–≤—ã–µ vs –°—É–º–º–∞ —Å—á–µ—Ç–∞',color_discrete_sequence=["red", "blue"])
        st.plotly_chart(fig2)

        st.subheader("üìÜ –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–∞–µ–≤—ã—Ö –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏")
        fig3 = px.box(df, x='day', y='tip', color='day', title='–ß–∞–µ–≤—ã–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏')
        st.plotly_chart(fig3)

        st.subheader("üë• –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å—É–º–º—ã —Å—á–µ—Ç–∞ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏")
        fig4 = px.bar(df, x='size', y='total_bill', title='–°—É–º–º–∞ —Å—á–µ—Ç–∞ vs –†–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏',color_discrete_sequence=["blue", "red"])
        st.plotly_chart(fig4)

        st.subheader("üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —á–∞–µ–≤—ã—Ö –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
        avg_tips = filtered_data.groupby("day")["tip"].mean()
        st.bar_chart(avg_tips)

        

    with tab3:
# –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
        corr_matrix = df.corr(numeric_only=True)
        st.write(corr_matrix.style.background_gradient(cmap='coolwarm'))

